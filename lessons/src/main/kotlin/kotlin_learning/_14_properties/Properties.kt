package kotlin_learning._14_properties


class Person {
    // if the property is mutable , compiler create getter and setter
    var name: String = "Smith"
    // if the property is immutable. compiler creates getter only
    val age: Int = 28
}

fun propertyDemo() {
    var person = Person()

    // in kotlin properties are accessed via their name
    // getters and setters are generated by the kotlin compiler
    println(person.name)
    println(person.age)

    person.name = "Jane"
    println(person.name)
}


class FieldDemo() {
    var state = false
        set(value) {
            // we can access the `state` variable in the setter  using `field` keyword
            println("state has changed: $field -> $value")
            field = value
        }

    var name = "Smith"
        set(value) {
            // this filed variable called, backing filed
            println("name has changed: $field -> $value")
            field = value
        }
        get() {
            println("returning the name: $field")
            return "name is : $field"
        }
}

fun filedDemo() {
    val fieldDemo = FieldDemo()
    fieldDemo.state = true

    val originalName = fieldDemo.name
    println("original name : $originalName")
    fieldDemo.name = "Jane"
}

enum class State { ON, OFF }

class FieldDemoWithoutBackingFiled {
    private var boolState = false

    var state: State
        // here we are not accessing the state variable within
        // getter of setter, hence the backing filed will not be created by the compiler
        get() = if (boolState) State.ON else State.OFF
        set(value: State) {
            boolState = value == State.ON
        }
}

fun filedDemoWithoutBackingFiled() {
    val fieldDemoWithoutBackingFiled = FieldDemoWithoutBackingFiled()

    println("state : ${fieldDemoWithoutBackingFiled.state}")
}

class NormalClass {
    // if we have not provide any specific getter of setter
    // compiler generates trivial getter and setter that returns
    // the filed value
    var normalProperty: String = "someValue"
}

fun normalClassDemo() {
    val normalClass = NormalClass()
    println(normalClass.normalProperty)
}

class ChangeVisibility {
    // sometimes we need a mutable variable inside the class,
    // but we want to make it non visible out side the class
    // for this we can use the privet set, to indicate the setter is private
    var counter: Int = 0
        private set

    fun addWord(word: String) {
        counter += word.length
    }
}

fun changeVisibilityDemo() {
   val chVisibility = ChangeVisibility()
    println(chVisibility.counter)
    chVisibility.addWord("someWord")
    println(chVisibility.counter)

    // Cannot assign to 'counter': the setter is private in 'ChangeVisibility'
    //chVisibility.counter = 6
}

fun main() {
    filedDemo()
    filedDemoWithoutBackingFiled()
    normalClassDemo()
    changeVisibilityDemo()
}